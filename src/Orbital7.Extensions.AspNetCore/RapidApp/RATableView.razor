@typeparam TEntity

@if (this.Template != null)
{
    var segments = this.GetSegments();

    @if (!this.NoItemsMessage.HasText() ||
        this.HasItems(segments))
    {
        <div class="@GetTableWrapperClass()">
            <table class="@GetTableClass()" style="@GetTableStyle()">
                <thead>
                    <tr>
                        @foreach (var column in this.Template.Columns)
                        {
                            <th class="@GetHeaderCellClass(column)"
                                @onclick="() => HandleOnSortBy(column)">
                                @column.HeadingText 
                                @if (column.SortBy)
                                {
                                    if (column.SortDescending)
                                    {
                                        <span>*</span>
                                    }
                                    else
                                    {
                                        <span>^</span>
                                    }
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var segment in segments)
                    {
                        if (segments.Count > 1)
                        {
                            <tr>
                                <td colspan="@this.Template.Columns.Count">
                                    @segment.Name
                                </td>
                            </tr>
                        }

                        // Don't use ForEach here, as rapid updates may cause overlapping rendering, 
                        // which errors out mid-enumeration.
                        var sortedItems = this.Template.GetSortedItems(segment);
                        for (int j = 0; j < this.DebugContentCount; j++)
                        {
                        for (int i = 0; i < sortedItems.Count; i++)
                        {
                            var item = sortedItems.ElementAt(i);

                            <tr>
                                @foreach (var column in this.Template.Columns)
                                {
                                    <td class="@GetCellClass(column, segment, item)"
                                        style="@GetCellStyle(column, segment, item)">
                                
                                        @if (column.OnCellUrlClicked != null)
                                        {
                                            <a href=""
                                               @onclick="() => column.OnCellUrlClicked(column, segment, item)"
                                               @onclick:preventDefault="true">
                                                <RATableViewCellContents Column="column" Item="item" />
                                            </a>
                                        }
                                        else if (column.GetCellUrl != null)
                                        {
                                            <a href="@column.GetCellUrl(column, segment, item)">
                                                <RATableViewCellContents Column="column" Item="item" />
                                            </a>
                                        }
                                        else
                                        {
                                            <RATableViewCellContents Column="column" Item="item" />
                                        }
                                    </td>
                                }
                            </tr>
                        }
                        }
                    }
                </tbody>
            </table>
        </div>
    }
    else if (this.NoItemsMessage.HasText())
    {
        <div>@this.NoItemsMessage</div>
    }
}

@code {

    [Parameter]
    public RATableTemplate<TEntity> Template { get; set; }

    [Parameter]
    public string NoItemsMessage { get; set; }

    [Parameter]
    public List<RATableViewSegment<TEntity>> Segments { get; set; }

    [Parameter]
    public ICollection<TEntity> Items { get; set; }

    // [Parameter]
    // public bool IsScrollableHorizontally { get; set; } = true;

    [Parameter]
    public bool IsScrollableVertically { get; set; } = true;

    [Parameter]
    public int? FixedHeight { get; set; }

    [Parameter]
    public int DebugContentCount { get; set; } = 1;

    private string GetTableWrapperClass()
    {
        var classes = "ra-scrollable-x ";

        if (this.IsScrollableVertically && !this.FixedHeight.HasValue)
        {
            classes += "ra-scrollable-y ra-flex-nostretch ";
        }

        return classes.Trim();
    }

    private string GetTableClass()
    {
        var classes = "ra-tableview ";

        // if (this.IsScrollableHorizontally)
        // {
        //     classes += "ra-scrollable-x ";
        // }

        if (this.FixedHeight.HasValue)
        {
            classes += "ra-scrollable-y ";
        }

        return classes.Trim();
    }

    private string GetTableStyle()
    {
        var style = String.Empty;

        if (this.FixedHeight.HasValue)
        {
            style += $"height: {this.FixedHeight.Value}px; display: inline-block; ";
        }

        return style.Trim();
    }

    private string GetHeaderCellClass(
        RATableTemplate<TEntity>.Column<TEntity> column)
    {
        string classes = String.Empty;

        if (column.IsSortable)
        {
            classes += "ra-clickable ";
        }

        return classes.Trim();
    }

    private string GetCellClass(
        RATableTemplate<TEntity>.Column<TEntity> column,
        RATableViewSegment<TEntity> segment,
        TEntity item)
    {
        string classes = String.Empty;

        if (column.GetCellClass != null)
        {
            classes += column.GetCellClass(column, segment, item) + " ";
        }

        return classes.Trim();
    }

    private string GetCellStyle(
        RATableTemplate<TEntity>.Column<TEntity> column,
        RATableViewSegment<TEntity> segment,
        TEntity item)
    {
        string style = String.Empty;

        if (column.GetCellStyle != null)
        {
            style += column.GetCellStyle(column, segment, item) + " ";
        }

        return style.Trim();
    }

    private void HandleOnSortBy(
        RATableTemplate<TEntity>.Column<TEntity> column)
    {
        if (column.IsSortable)
        {
            if (column.SortBy)
            {
                column.SortDescending = !column.SortDescending;
            }
            else
            {
                this.Template.SetSortByColumn(column, false);
            }
        }
    }

    private List<RATableViewSegment<TEntity>> GetSegments()
    {
        if (this.Segments != null)
        {
            return this.Segments;
        }
        else
        {
            return new([new("Default", this.Items)]);
        }
    }

    private bool HasItems(
        List<RATableViewSegment<TEntity>> segments)
    {
        return segments != null &&
            segments.Count > 0 &&
            segments.Any(x => x.HasItems);
    }
}
